<?php
//this module populates a custom field whenever a service provider becomes a partner or active contributor

//At the moment, it is set to run whenever a group or membership is created or edited.

//The reason we do this is because we need something we can add to a view, since it (IMHO) is impossible to do the view calculation in the view itself

function civicrm_org_providers_civicrm_post($op, $objectName, $objectId, $ObjectRef){
    if(!in_array($op, array('edit', 'create', 'delete'))){
        return;
    }
    if($objectName == 'Membership'){
        civicrm_org_providers_update_provider($ObjectRef->contact_id);
    }
    if($objectName == 'GroupContact' && in_array($objectId, array(131,140,267))){
        foreach($ObjectRef as $contact);
        if(is_object($contact)){
            civicrm_org_providers_update_provider($contact->id);
        }else{
            civicrm_org_providers_update_provider($contact);
        }//$objectref is an array of contacts that are going to be added to the group, it seems...
    }
}

function civicrm_org_providers_update_provider($contact_id){
    civicrm_initialize();

    //check that the contact is a service provider contact subtype
    $params = array('version' => 3, 'contact_id' => $contact_id);
    $contact=civicrm_api('Contact', 'getsingle', $params);
    if(!is_array($contact['contact_sub_type']) OR !in_array('Service_provider', $contact['contact_sub_type'])){
        return;
    };

    //find out if they are in the founding members group
    $params = array('version' => 3, 'contact_id' => $contact_id);
    $founder = false;
    $groups=civicrm_api('GroupContact', 'get', $params);
    foreach($groups['values'] as $group){
        if($group['group_id']==140){
            $founder = true;
            break;
        }
    }

    //find out if they are in the active contributors group
    $params = array('version' => 3, 'contact_id' => $contact_id);
    $groups=civicrm_api('GroupContact', 'get', $params);
    foreach($groups['values'] as $group){
      switch ($group['group_id']) {
      case 488:
        $badges[] = 'contributor-supporting';
        break;
      case 489:
        $badges[] = 'contributor-empowering';
        break;
      case 490:
        $badges[] = 'contributor-sustaining';
        break;
      }
    }

    //find out if they are in the technology partners group
    // $params = array('version' => 3, 'contact_id' => $contact_id);
    // $groups=civicrm_api('GroupContact', 'get', $params);
    // foreach($groups['values'] as $group){
    //     if($group['group_id']==267){
    //         $badges[]='technology-sponsor';
    //         break;
    //     }
    // }
    //find out if they members and what type of members they are
    $memberships = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_membership WHERE contact_id = %1 ORDER BY start_date DESC LIMIT 1", array(1 => array($contact_id, 'Integer')));
    $memberships->fetch();
    $params = array('version' => 3, 'membership_id' => $memberships->id);
    $membership=civicrm_api('Membership', 'getsingle', $params);
    $membershipTypeBadgeTranslate=array(
      1 => 'partner-supporting',
      2 => 'partner-empowering',
      3 => 'partner-sustaining',
      12 => 'partner-sustaining',
      13 => 'partner-empowering',
      14 => 'partner-supporting',
      11 => 'sponsor-sustaining',
      10 => 'sponsor-empowering',
      18 => 'sponsor-supporting',
    );
    if(in_array($membership['status_id'], array(1,2,3,5)) AND in_array($membership['membership_type_id'], array_keys($membershipTypeBadgeTranslate))){ //1=new, 2=current, 3=grace, 5=pending

        // print_r($membershipTypeBadgeTranslate[$membership['membership_type_id']]);exit;
        $partnerText = $membershipTypeBadgeTranslate[$membership['membership_type_id']];
        if($founder){
            $partnerText = $partnerText.'-founding';
        }
        $badges[]=$partnerText;
    }
    $updateParams = array('version' => 3, 'contact_id' => $contact_id, 'custom_160' => json_encode($badges));
    $result=civicrm_api('contact', 'update', $updateParams);
    $result=civicrm_api('involvement', 'update', array('contact_id' =>$contact_id, 'version' => 3));
    return;
}

function civicrm_org_providers_block_info(){
    $blocks['update_links'] = array(
        'info' => 'Update profiles via user dashboard',
        'cache' => DRUPAL_NO_CACHE
    );
    return $blocks;
}


function civicrm_org_providers_block_view($block_name){
    switch($block_name){

    case 'update_links':

        civicrm_initialize();
        $session = CRM_Core_Session::singleton();
        $myContactID = $session->get('userID');
        $validStatuses = array("1","2","3","5");
        $params = array(
            'version' => 3,
            'sequential' => 1,
            'is_permission_a_b' => 1,
            'contact_id_a' => $myContactID,
            'relationship_type_id' => 4,
            'is_active' => 1,
        );
        $result = civicrm_api('Relationship', 'get', $params);
        $thereAreLinks = FALSE;
        foreach($result['values'] as $dontCare => $rel){
            $showLink = FALSE;
            $memParams = array(
                'version' => 3,
                'sequential' => 1,
                'contact_id' => $rel['contact_id_b'],
                'return' => 'status_id',
            );
            $memStatus = civicrm_api('Membership', 'getvalue', $memParams);
            //      var_dump($memStatus);
            // If org has membership (new, current, grace, or pending) show link. Else check if in active contributor group (gid=131)
            if (in_array($memStatus, $validStatuses)) {
                $showLink = TRUE;
            } else {
                $groupParams = array(
                    'version' => 3,
                    'sequential' => 1,
                    'contact_id' => $rel['contact_id_b'],
                );
                $groups = civicrm_api('GroupContact', 'get', $groupParams);
                foreach($groups['values'] as $dontCare => $group){
                    if ($group['group_id'] == '131') {
                        $showLink = TRUE;
                    }
                }
            }

            if ($showLink) {
                // Get provider display-name
                $thereAreLinks = TRUE;
                $params = array(
                    'version' => 3,
                    'sequential' => 1,
                    'contact_id' => $rel['contact_id_b'],
                    'return' => 'display_name',
                );
                $pName = civicrm_api('Contact', 'getvalue', $params);
                $pLink = CRM_Utils_System::url("civicrm/profile/edit", "gid=48&reset=1&id={$rel['contact_id_b']}");
                $content .= '<div class="bold"><a href="' . $pLink . '">Edit listing for ' . $pName . '</a></li></div>';
            }
        }
        if(!$thereAreLinks){
            return;
        }
        $content .= '</div>';
        $output = array(
            'subject' => 'Partner / active contributor listing(s)',
            'content' => $content
        );
        return $output;
    }
}

function civicrm_org_providers_batch_update($contact_ids=array()){
    civicrm_initialize();
    if(count($contact_ids)==0){
        $contacts = CRM_Core_DAO::executeQuery("SELECT contact_id FROM civicrm_group_contact WHERE group_id IN (131,140,267) UNION SELECT contact_id FROM civicrm_membership");
        while($contacts->fetch()){
            civicrm_org_providers_update_provider($contacts->contact_id);
        }
    }
}
